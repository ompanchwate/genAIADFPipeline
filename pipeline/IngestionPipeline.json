{
	"name": "IngestionPipeline",
	"properties": {
		"activities": [
			{
				"name": "check_if_exists",
				"type": "Validation",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "SourceDataset",
						"type": "DatasetReference",
						"parameters": {
							"container": "raw",
							"file": "logistics_dataset_with_maintenance_required.csv"
						}
					},
					"timeout": "0.12:00:00",
					"sleep": 10
				}
			},
			{
				"name": "Get Metadata",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "check_if_exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "SourceDataset",
						"type": "DatasetReference",
						"parameters": {
							"container": "raw",
							"file": "logistics_dataset_with_maintenance_required.csv"
						}
					},
					"fieldList": [
						"itemType",
						"itemName",
						"size",
						"columnCount"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('Get Metadata').output.columnCount, 27)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Fail1",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "sendSuccessfulMessage_copy1",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": "Pipeline Failed",
								"errorCode": "400"
							}
						},
						{
							"name": "sendSuccessfulMessage_copy1",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"url": "https://prod-25.northcentralus.logic.azure.com:443/workflows/818762af842f41178ce23bb043be6c52/triggers/When_an_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_an_HTTP_request_is_received%2Frun&sv=1.0&sig=u5uCz7mVZSP_1ahMyMC1VvaZ5oQSh6s5u0L0OwsImd8",
								"body": {
									"value": "{\n  \"message\": \"❌ FleetIngestionPipeline Failed <br>Time: @{pipeline().TriggerTime}<br>Reason: Expected Column Count 27 but got Column Count: @{activity('Get Metadata').output.columnCount}\"\n}\n",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "SourceDataset",
									"type": "DatasetReference",
									"parameters": {
										"container": "raw",
										"file": "logistics_dataset_with_maintenance_required.csv"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "SinkDataset",
									"type": "DatasetReference",
									"parameters": {
										"container": "fleetdata"
									}
								}
							]
						},
						{
							"name": "sendSuccessfulMessage",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Copy data1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"url": "https://prod-16.northcentralus.logic.azure.com:443/workflows/c936927db7ba4d0ca996c7aae977e031/triggers/When_an_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_an_HTTP_request_is_received%2Frun&sv=1.0&sig=L5hfEUNAF6fCZLDSC_yDZYXJbLtzagov6eK1Lg0bA2M",
								"body": {
									"value": "{\n  \"message\": \"✅ FleetIngestionPipeline succeeded <br> Time : @{pipeline().TriggerTime}<br>Column Count: @{activity('Get Metadata').output.columnCount}<br>File Name: @{activity('Get Metadata').output.itemName}<br>Item Type: @{activity('Get Metadata').output.itemType}<br> Size : @{activity('Get Metadata').output.size}\"\n}\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2025-10-28T18:44:08Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}